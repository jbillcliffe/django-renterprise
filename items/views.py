from django.shortcuts import render, get_object_or_404, reverse
from django.contrib import messages
from django.views.generic import ListView
from django.http import HttpResponseRedirect
from .models import Item, ItemType
from .forms import ItemForm

# Create your views here.
class ItemList(ListView):
    paginate_by = 9
    model = Item
    
# def item_search(request):
#     """
#     function to display the item search feature. Display and paginate
#     all found instances under the search critera (or all can be selected)
#     """
#    template_name = "items/item_search.html"
#    #item_search_form = ItemSearchForm()
#    #paginate_by = 10
#
    #if request.method == "POST":
    #    item_search_form = ItemSearchForm(data=request.POST)
    #    if item_search_form.is_valid():
    #        for field in Entry.objects.all():
    #        queryset = Item.objects.filter(status=1)
    #        post = get_object_or_404(queryset, slug=slug)
    #
    #return render(
    #    request,
    #    "items/item_search.html",
    #    {
    #        "item_search_form":item_search_form,
    #    }
    #)

def item_create(request):
    """
    Function to display the item_create.html template
    which will allow new items to be added based on existing
    types.
    """
    if request.method == "POST":
        item_form = ItemForm(data=request.POST)
        if item_form.is_valid():
            item = item_form.save(commit=False)
            item.item_type = request.item_type
            item.item_serial = request.item_serial
            item.delivery_date = null
            item.collect_date = null
            item.repair_date = null
            item.save()
            messages.add_message(
                request, messages.SUCCESS,
                'New item has been added'
            )
    item_form = ItemForm()
    return render(
        request,
        "items/item_create.html",
        {
            "item_form": item_form,
        },
    )

def item_view(request, id):
    """
    Function to view a singular item after being selected.
    """
    template_name = "items/item_view.html"
    
    # Find a singular Item object. Look in "Item" table in the pk
    # primary key field (auto generated by Django).
    obj = get_object_or_404(Item, pk=id)

    # Render the template item view and send the found "Item" to it.
    return render(
        request,
        "items/item_view.html",
        {
            "item":obj,
        },
    )